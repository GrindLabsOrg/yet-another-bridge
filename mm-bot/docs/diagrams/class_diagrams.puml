@startuml

title MM Diagram Class
hide members

class MM {
  run()
  process_order_events(order_events: list, order_service: OrderService,
                         eth_lock: asyncio.Lock, herodotus_semaphore: asyncio.Semaphore)
  create_order_tasks(order: Order, order_service: OrderService, eth_lock: asyncio.Lock,
                      herodotus_semaphore: asyncio.Semaphore)
  process_order(order: Order, order_service: OrderService,
                        eth_lock: asyncio.Lock, herodotus_semaphore: asyncio.Semaphore)
  failed_orders_job(order_service: OrderService,
                      eth_lock: asyncio.Lock, herodotus_semaphore: asyncio.Semaphore)
  process_failed_orders(order_service: OrderService,
                                eth_lock: asyncio.Lock, herodotus_semaphore: asyncio.Semaphore)
  set_order_events_from_accepted_blocks_job(order_service: OrderService, block_dao: BlockDao,
                                              eth_lock: asyncio.Lock, herodotus_semaphore: asyncio.Semaphore)
  process_orders_from_accepted_blocks(order_service: OrderService, block_dao: BlockDao,
                                              eth_lock: asyncio.Lock, herodotus_semaphore: asyncio.Semaphore)
  transfer(order: Order, order_service: OrderService)
  wait_transfer(order: Order, order_service: OrderService)
}

package services {
  package ethereum {
    class Ethereum {
      __ main methods __
      + transfer(deposit_id, dst_addr, amount)
      + withdraw(deposit_id, dst_addr, amount, value)
      + get_is_used_order(order_id, recipient_address, amount, rpc_node): bool

      __ auxiliary methods __
      + get_latest_block(rpc_node): int
      + get_balance(rpc_node): int
      + has_funds(amount: int): bool
      + create_transfer(deposit_id, dst_addr_bytes, amount, rpc_node)
      + create_withdraw(deposit_id, dst_addr_bytes, amount, value, rpc_node)
      + get_nonce(w3: Web3, address)
      + estimate_transaction_fee(transaction, rpc_node)
      + get_gas_price(rpc_node)
      + has_enough_funds(amount: int, gas_fee: int): bool
      + send_raw_transaction(signed_tx, rpc_node)
      + wait_for_transaction_receipt(tx_hash, rpc_node)
    }
    MM *-- Ethereum

    class EthereumRpcNode {
      + w3
      + account
      + contract
    }
    Ethereum *-- EthereumRpcNode
  }
  class Herodotus {
    + herodotus_prove(block, order_id, slot): str
    + herodotus_status(task_id): str
    + herodotus_poll_status(task_id): bool
  }

  class OrderService {
    + create_order(order: Order): Order
    + get_order(order_id): Order | None
    + get_order(order_id): Order | None
    + get_failed_orders()
    + already_exists(order_id): bool
    + set_order_processing(order: Order): Order
    + set_order_transferring(order: Order, tx_hash): Order
    + set_order_fulfilled(order: Order): Order
    + set_order_proving_herodotus(order: Order, task_id, block, slot): Order
    + set_order_proving_ethereum(order: Order, tx_hash): Order
    + set_order_proved(order: Order): Order
    + set_order_completed(order: Order): Order
    + set_order_dropped(order: Order): Order
    + set_order_failed(order: Order, error_message: str): Order
    + reset_failed_order(order: Order): Order
    + set_failed(order: Order, failed: bool): Order
  }
  MM *-- OrderService

  class OverallFeeCalculator {
    estimate_overall_fee(order: Order): int
    estimate_transfer_fee(order: Order): int
    estimate_yab_withdraw_fee(): int
    estimate_message_fee(order: Order):
  }
  MM *-- OverallFeeCalculator
  package starknet {
    class Starknet {
      __ main methods __
      + get_starknet_events(from_block_number: Literal["pending", "latest"] | int | None,
                                  to_block_number: Literal["pending", "latest"] | int | None,
                                  continuation_token, rpc_node)
      + get_order_events(from_block_number, to_block_number): list[SetOrderEvent]
      + withdraw(order_id, block, slot): bool

      __ auxiliary methods __
      + create_set_order_event(event)
      + get_order_id(event): int
      + get_recipient_address(event): str
      + get_amount(event): int
      + parse_u256_from_double_u128(low, high): int
      + get_fee(event): int
      + get_latest_block(rpc_node): int
      + sign_invoke_transaction(call: Call, max_fee: int, rpc_node)
      + estimate_message_fee(from_address, to_address, entry_point_selector, payload, rpc_node)
      + send_transaction(transaction, rpc_node)
      + wait_for_tx(transaction_hash, rpc_node)
    }
    MM *-- Starknet

    class StarknetRpcNode {
      + full_node_client
      + account
      + contract_address
    }
    Starknet *-- StarknetRpcNode

    class MMFullNodeClient {
    }
    StarknetRpcNode *-- MMFullNodeClient

    class SetOrderEvent {
      + order_id
      + starknet_tx_hash
      + recipient_address
      + amount
      + fee
      + block_number
      + is_used
    }
  }

  package withdrawers {
    interface Withdrawer {
    + send_withdraw(order: Order, order_service: OrderService)
    + wait_for_withdraw(order: Order, order_service: OrderService)
    + close_withdraw(order: Order, order_service: OrderService)
    }
    MM *-right- Withdrawer

    class EthereumWithdrawer {
      {static} estimate_withdraw_fallback_message_fee(order_id, recipient_address, amount)
    }
    Withdrawer <|-- EthereumWithdrawer

    class HerodotusWithdrawer {
    }
    Withdrawer <|-- HerodotusWithdrawer
    HerodotusWithdrawer *-- Herodotus
  }
}

package persistence <<Database>> {
  class BlockDao {
    + get_latest_block(): int
    + update_latest_block(latest_block: int)
  }
  MM *-- BlockDao

  class ErrorDao {
    + create_error(error: Error): Error
  }
  OrderService *-- ErrorDao

  class OrderDao {
    + create_order(order: Order): Order
    + get_order(order_id: int): Order | None
    + get_orders(criteria): list[Type[Order]]
    + get_incomplete_orders() list[Type[Order]]
    + get_failed_orders(): list[Type[Order]]
    + already_exists(order_id): bool
    + update_order(order: Order): Order
  }
  OrderService *-- OrderDao
}

package models {
  class Block {
    + id
    + latest_block
    + created_at
  }

  class Error {
    + id
    + order
    + message
    + created_at
  }

  class Order {
    + order_id
    + starknet_tx_hash
    + recipient_address
    + amount
    + fee
    + status
    + failed
    + tx_hash
    + transferred_at
    + herodotus_task_id
    + herodotus_block
    + herodotus_slot
    + eth_withdraw_tx_hash
    + completed_at
    + created_at

    + get_int_amount()
    + get_int_fee()
  }

  Error *-- Order

  enum OrderStatus {
    PENDING
    PROCESSING
    TRANSFERRING
    FULFILLED
    PROVING
    PROVED
    COMPLETED
    DROPPED
  }
  Order *-- OrderStatus
}
@enduml
